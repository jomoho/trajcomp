// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// persistence_curve
NumericVector persistence_curve(NumericMatrix T);
RcppExport SEXP trajcomp_persistence_curve(SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    __result = Rcpp::wrap(persistence_curve(T));
    return __result;
END_RCPP
}
// persistence_extrema
NumericVector persistence_extrema(NumericMatrix T);
RcppExport SEXP trajcomp_persistence_extrema(SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    __result = Rcpp::wrap(persistence_extrema(T));
    return __result;
END_RCPP
}
// persistence_bars
NumericVector persistence_bars(NumericMatrix T, NumericVector it);
RcppExport SEXP trajcomp_persistence_bars(SEXP TSEXP, SEXP itSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type it(itSEXP);
    __result = Rcpp::wrap(persistence_bars(T, it));
    return __result;
END_RCPP
}
// persistence_pruned
NumericMatrix persistence_pruned(NumericMatrix T, NumericVector Beta, NumericVector it);
RcppExport SEXP trajcomp_persistence_pruned(SEXP TSEXP, SEXP BetaSEXP, SEXP itSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type it(itSEXP);
    __result = Rcpp::wrap(persistence_pruned(T, Beta, it));
    return __result;
END_RCPP
}
// persistence_pruned_ppp
NumericMatrix persistence_pruned_ppp(NumericMatrix T, NumericVector Beta, NumericVector it);
RcppExport SEXP trajcomp_persistence_pruned_ppp(SEXP TSEXP, SEXP BetaSEXP, SEXP itSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type it(itSEXP);
    __result = Rcpp::wrap(persistence_pruned_ppp(T, Beta, it));
    return __result;
END_RCPP
}
// persistence_comps
NumericVector persistence_comps(NumericVector T, NumericVector Beta, NumericVector it);
RcppExport SEXP trajcomp_persistence_comps(SEXP TSEXP, SEXP BetaSEXP, SEXP itSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type it(itSEXP);
    __result = Rcpp::wrap(persistence_comps(T, Beta, it));
    return __result;
END_RCPP
}
// persistence_multires_index
NumericVector persistence_multires_index(NumericMatrix T, NumericVector Beta, NumericVector Levels);
RcppExport SEXP trajcomp_persistence_multires_index(SEXP TSEXP, SEXP BetaSEXP, SEXP LevelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Levels(LevelsSEXP);
    __result = Rcpp::wrap(persistence_multires_index(T, Beta, Levels));
    return __result;
END_RCPP
}
// PersistenceMRS
NumericMatrix PersistenceMRS(NumericMatrix T, NumericVector Beta, NumericVector Levels);
RcppExport SEXP trajcomp_PersistenceMRS(SEXP TSEXP, SEXP BetaSEXP, SEXP LevelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Levels(LevelsSEXP);
    __result = Rcpp::wrap(PersistenceMRS(T, Beta, Levels));
    return __result;
END_RCPP
}
// PersistenceSDS
NumericMatrix PersistenceSDS(NumericMatrix T, NumericVector Beta, NumericVector Epsilon, NumericVector Iterations);
RcppExport SEXP trajcomp_PersistenceSDS(SEXP TSEXP, SEXP BetaSEXP, SEXP EpsilonSEXP, SEXP IterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Epsilon(EpsilonSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Iterations(IterationsSEXP);
    __result = Rcpp::wrap(PersistenceSDS(T, Beta, Epsilon, Iterations));
    return __result;
END_RCPP
}
// persistence_test_bars
NumericVector persistence_test_bars(NumericVector T, NumericVector Beta, NumericVector it);
RcppExport SEXP trajcomp_persistence_test_bars(SEXP TSEXP, SEXP BetaSEXP, SEXP itSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type it(itSEXP);
    __result = Rcpp::wrap(persistence_test_bars(T, Beta, it));
    return __result;
END_RCPP
}
// persistence_test_comps
NumericVector persistence_test_comps(NumericVector T, NumericVector Beta, NumericVector it);
RcppExport SEXP trajcomp_persistence_test_comps(SEXP TSEXP, SEXP BetaSEXP, SEXP itSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type it(itSEXP);
    __result = Rcpp::wrap(persistence_test_comps(T, Beta, it));
    return __result;
END_RCPP
}
// string_distance_dispatchbyname
double string_distance_dispatchbyname(std::string t, std::string q, std::string name, int k);
RcppExport SEXP trajcomp_string_distance_dispatchbyname(SEXP tSEXP, SEXP qSEXP, SEXP nameSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type t(tSEXP);
    Rcpp::traits::input_parameter< std::string >::type q(qSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    __result = Rcpp::wrap(string_distance_dispatchbyname(t, q, name, k));
    return __result;
END_RCPP
}
// compileSettings
size_t compileSettings(std::string setting);
RcppExport SEXP trajcomp_compileSettings(SEXP settingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type setting(settingSEXP);
    __result = Rcpp::wrap(compileSettings(setting));
    return __result;
END_RCPP
}
// trajectory_distances
SEXP trajectory_distances(NumericMatrix S, NumericMatrix T, int hSetting);
RcppExport SEXP trajcomp_trajectory_distances(SEXP SSEXP, SEXP TSEXP, SEXP hSettingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type hSetting(hSettingSEXP);
    __result = Rcpp::wrap(trajectory_distances(S, T, hSetting));
    return __result;
END_RCPP
}
// trajectory_distance_vector
NumericVector trajectory_distance_vector(NumericMatrix S, NumericMatrix T, int hSetting);
RcppExport SEXP trajcomp_trajectory_distance_vector(SEXP SSEXP, SEXP TSEXP, SEXP hSettingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type hSetting(hSettingSEXP);
    __result = Rcpp::wrap(trajectory_distance_vector(S, T, hSetting));
    return __result;
END_RCPP
}
// encode
String encode(NumericMatrix T, std::string feature);
RcppExport SEXP trajcomp_encode(SEXP TSEXP, SEXP featureSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< std::string >::type feature(featureSEXP);
    __result = Rcpp::wrap(encode(T, feature));
    return __result;
END_RCPP
}
// distance_vector_ddply
NumericVector distance_vector_ddply(NumericMatrix T, NumericMatrix Q, int hSetting);
RcppExport SEXP trajcomp_distance_vector_ddply(SEXP TSEXP, SEXP QSEXP, SEXP hSettingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type hSetting(hSettingSEXP);
    __result = Rcpp::wrap(distance_vector_ddply(T, Q, hSetting));
    return __result;
END_RCPP
}
// getDistanceNames
CharacterVector getDistanceNames(int hSetting);
RcppExport SEXP trajcomp_getDistanceNames(SEXP hSettingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type hSetting(hSettingSEXP);
    __result = Rcpp::wrap(getDistanceNames(hSetting));
    return __result;
END_RCPP
}
// DouglasPeucker
NumericMatrix DouglasPeucker(NumericMatrix S, double epsilon);
RcppExport SEXP trajcomp_DouglasPeucker(SEXP SSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    __result = Rcpp::wrap(DouglasPeucker(S, epsilon));
    return __result;
END_RCPP
}
// DouglasPeuckerWeights
NumericMatrix DouglasPeuckerWeights(NumericMatrix S, double epsilon);
RcppExport SEXP trajcomp_DouglasPeuckerWeights(SEXP SSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    __result = Rcpp::wrap(DouglasPeuckerWeights(S, epsilon));
    return __result;
END_RCPP
}
// doPLI
NumericMatrix doPLI(NumericMatrix data, int n);
RcppExport SEXP trajcomp_doPLI(SEXP dataSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(doPLI(data, n));
    return __result;
END_RCPP
}
// cpp_traclus
DataFrame cpp_traclus(NumericMatrix TrajectoryDB, double eps, int minLines);
RcppExport SEXP trajcomp_cpp_traclus(SEXP TrajectoryDBSEXP, SEXP epsSEXP, SEXP minLinesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type TrajectoryDB(TrajectoryDBSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type minLines(minLinesSEXP);
    __result = Rcpp::wrap(cpp_traclus(TrajectoryDB, eps, minLines));
    return __result;
END_RCPP
}
// redSVD
List redSVD(SEXP AA, int num);
RcppExport SEXP trajcomp_redSVD(SEXP AASEXP, SEXP numSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    Rcpp::traits::input_parameter< int >::type num(numSEXP);
    __result = Rcpp::wrap(redSVD(AA, num));
    return __result;
END_RCPP
}
